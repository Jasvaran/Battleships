(()=>{"use strict";var e={d:(t,r)=>{for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Ps:()=>c,Kp:()=>p});let t=document.querySelector(".player-1-content"),r=document.querySelector(".player-2-content");const s=document.querySelector(".start-game"),i=document.querySelector(".notify"),o=document.querySelector(".submit"),l=document.querySelector("#attack");let n=!1;s.addEventListener("click",(async function(){if(0==n){n=!0;let e=p();!function(e,s){let i=document.querySelectorAll("#main-grid");i.forEach(((e,t)=>{e.style.setProperty("--grid-rows",2),e.style.setProperty("--grid-cols",2),e.setAttribute("class",`player-${t+1}-grid`);for(let t=0;t<4;t++){let r=document.createElement("div");r.innerText=t,r.className="grid-item",e.appendChild(r)}})),t.appendChild(i[0]),r.appendChild(i[1]),function(e){let t=document.querySelectorAll(".grid-item"),r=[];e.board.forEach((e=>{e.forEach((e=>{r.push(e.box)}))}));let s=Array.from(t);const i=Math.ceil(s.length/2),o=s.splice(0,i),l=s.splice(-i),n=[];n.push(o,l),n.forEach((e=>{e.forEach(((e,t)=>{e.setAttribute("data-key",`[${r[t]}]`),e.setAttribute("data-ship",!1),e.innerHTML=`[${r[t]}]`}))}))}(c(2))}(),function(e){let t=document.querySelectorAll(".grid-item"),r=Array.from(t);const s=Math.ceil(r.length/2),i=r.splice(0,s),o=r.splice(-s);e.player_1_board.gridItems=i,e.player_2_board.gridItems=o}(e),console.log(e),await async function(e){let t=[];for(let r=0;r<2;r++){i.innerHTML=`Player 1 assign ship ${r+1}`;let s=!1;for(;!s;){let r=await new Promise((e=>{o.onclick=function(){let t=l.value;l.value="",e(t)}}));if(e.validMoves.some((e=>e===r))&&!t.includes(r)){let i=[],o=parseInt(r[1]),l=parseInt(r[3]);i.push(o,l),e.player_1_board.placeShip(i),e.player_1_board.manipulateDom(i),t.push(r),console.log(e.player_1_board),s=!0}else alert("Example: '[0,0]' // cannot place multiple ships in same coordinates")}}i.innerHTML=""}(e),function(e){const t=e.validMoves;let r=[];for(let s=0;s<2;s++){const s=t[Math.floor(Math.random()*t.length)];if(!r.includes(s)){let t=[],i=parseInt(s[1]),o=parseInt(s[3]);t.push(i,o),e.player_2_board.placeShip(t),e.player_2_board.manipulateDom(t),r.push(s),console.log(e.player_2_board)}}}(e)}else 1==n&&alert("game in progress")}));const a=(e,t,r)=>({length:e,sunk:t,noOfHits:r,hitShip:function(){this.noOfHits++,this.isSunk()},isSunk(){this.length==this.noOfHits&&(this.sunk=!0)}}),c=e=>{let t=[],r=[];for(let t=0;t<e;t++){r[t]=[];for(let s=0;s<e;s++)r[t][s]={box:[t,s]}}return{board:r,manipulateDom([e,t]){if(this.gridItems){let r=JSON.stringify([e,t]);console.log(r),this.gridItems.forEach((e=>{e.dataset.key===r&&(e.dataset.ship=!0,e.style.color="red")}))}},placeShip([e,t]){let r;return this.board.forEach((s=>{s.forEach((s=>{if(s.box[0]===e&&s.box[1]===t){if("ship"in s==0)return s.ship=a(1,!1,0),r="placed ship",this.noOfShips++,s;if("ship"in s==1)return void(r="already placed ship here")}}))})),r},recieveAttack([e,r]){let s;return this.board.forEach((i=>{i.forEach((i=>{i.box[0]===e&&i.box[1]===r&&"ship"in i==1?(i.ship.hitShip(),this.noOfSuccesfulHits++,s=i.ship.noOfHits,console.log("hit ship")):i.box[0]===e&&i.box[1]===r&&"ship"in i==0&&(console.log("missed ship"),this.missedHits.push([e,r]),s=t)}))})),this.checkShipStatus(),s},checkShipStatus(){this.noOfShips>0&&this.noOfSuccesfulHits==this.noOfShips&&(console.log("All ships sunk"),this.allShipsSunk=!0)},missedHits:t,noOfShips:0,noOfSuccesfulHits:0,allShipsSunk:!1}},h=e=>({name:e,winner:!1}),p=()=>{let e=!0,t=!0,r=!1,s=[],i=[],o=[],l=h("player 1"),n=h("player 2"),a=c(2),p=c(2);a.ai=!1,p.ai=!0;for(let e=0;e<a.board.length;e++)a.board[e].forEach((e=>{let t=JSON.stringify(e.box);o.push(t)}));return{player1:l,player2:n,player_1_board:a,player_2_board:p,player2_history:i,player1_turn:t,player2_turn:r,validMoves:o,p1_shipsReady:!1,p2_shipsReady:!1,checkMoves:(e,t)=>t.some((t=>t===e)),checkHistory:(e,t)=>t.some((t=>t===e)),recieveInput(e,t){let r,s=!1;for(;!s;){let i=prompt(e.name+" enter coordinates");if(0==this.checkHistory(i,t)&&1==this.checkMoves(i,o))return alert("valid"),t.push(i),s=!0,r=i,i;1!=this.checkHistory(i,t)&&0!=this.checkMoves(i,o)||alert("must make valid move")}return r},registerTurn(e,t){let r=[],s=parseInt(t[1]),i=parseInt(t[3]);r.push(s,i),e.recieveAttack(r),console.log(e.board)},makeMoves(){for(;!0===e;){if(1==t){console.log("player 1 turn");let e=this.recieveInput(l,i);this.registerTurn(p,e),console.log(e),t=!1,r=!0}else if(1==r){console.log("player 2 turn");let e=this.recieveInput(n,s);this.registerTurn(a,e),console.log(e),r=!1,t=!0}this.endGame(a,p)}},endGame(t,r){1!=t.allShipsSunk&&1!=r.allShipsSunk||(e=!1)}}};p()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,