(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Ps:()=>g,Kp:()=>H});let t=document.querySelector(".player-1-content"),s=document.querySelector(".player-2-content");const i=document.querySelector(".start-game"),r=document.querySelector(".notify"),o=document.querySelector(".submit"),n=document.querySelector("#attack"),l=document.querySelector("#p1-missed"),a=document.querySelector("#p1-success"),c=document.querySelector("#p2-missed"),u=document.querySelector("#p2-success"),h=document.querySelector(".player-1-grid"),p=document.querySelector(".player-2-grid"),d=document.querySelector(".restart"),y={p1_missed:l,p1_success:a,p2_missed:c,p2_success:u,restartBtn:d};let m=!1;function f(){return new Promise((e=>{o.onclick=function(){let t=n.value;n.value="",e(t)}}))}i.addEventListener("click",(async function(){if(0==m){m=!0;let e=H();!function(e,i){let r=document.querySelectorAll("#main-grid");r.forEach(((e,t)=>{e.style.setProperty("--grid-rows",2),e.style.setProperty("--grid-cols",2),e.setAttribute("class",`player-${t+1}-grid`);for(let t=0;t<4;t++){let s=document.createElement("div");s.innerText=t,s.className="grid-item",e.appendChild(s)}})),t.appendChild(r[0]),s.appendChild(r[1]),function(e){let t=document.querySelectorAll(".grid-item"),s=[];e.board.forEach((e=>{e.forEach((e=>{s.push(e.box)}))}));let i=Array.from(t);const r=Math.ceil(i.length/2),o=i.splice(0,r),n=i.splice(-r),l=[];l.push(o,n),l.forEach((e=>{e.forEach(((e,t)=>{e.setAttribute("data-key",`[${s[t]}]`),e.setAttribute("data-ship",!1),e.innerHTML=`[${s[t]}]`}))}))}(g(2))}(),function(e){let t=document.querySelectorAll(".grid-item"),s=Array.from(t);const i=Math.ceil(s.length/2),r=s.splice(0,i),o=s.splice(-i);e.player_1_board.gridItems=r,e.player_2_board.gridItems=o}(e),console.log(e),await async function(e){let t=[];for(let s=0;s<2;s++){r.innerHTML=`Player 1 assign ship ${s+1}`;let i=!1;for(;!i;){let s=await f();if(e.validMoves.some((e=>e===s))&&!t.includes(s)){let r=[],o=parseInt(s[1]),n=parseInt(s[3]);r.push(o,n),e.player_1_board.placeShip(r),e.player_1_board.manipulateDom(r),t.push(s),console.log(e.player_1_board),i=!0}else alert("Example: '[0,0]' // cannot place multiple ships in same coordinates")}}r.innerHTML=""}(e),await function(e){const t=e.validMoves;let s=[];for(let i=0;i<2;i++){const i=t[Math.floor(Math.random()*t.length)];if(!s.includes(i)){let t=[],r=parseInt(i[1]),o=parseInt(i[3]);t.push(r,o),e.player_2_board.placeShip(t),e.player_2_board.manipulateDom(t),s.push(i),console.log(e.player_2_board)}}}(e),e.makeMoves()}else 1==m&&alert("game in progress")})),d.addEventListener("click",(()=>{m=!1,h.innerHTML="",p.innerHTML="",l.textContent="Missed Hits: ",c.textContent="Missed Hits: ",a.textContent="Succesfull Hits: ",u.textContent="Successfull Hits: "}));const S=(e,t,s)=>({length:e,sunk:t,noOfHits:s,hitShip:function(){this.noOfHits++,this.isSunk()},isSunk(){this.length==this.noOfHits&&(this.sunk=!0)}}),g=e=>{let t=[],s=[];for(let t=0;t<e;t++){s[t]=[];for(let i=0;i<e;i++)s[t][i]={box:[t,i]}}return{board:s,manipulateDom([e,t]){if(this.gridItems){let s=JSON.stringify([e,t]);console.log(s),this.gridItems.forEach((e=>{if(e.dataset.key===s){let t=document.createElement("img");t.setAttribute("src","../images/battleship.svg"),t.setAttribute("class","battleship"),e.appendChild(t),e.dataset.ship=!0,e.style.color="red",console.log(e)}}))}},placeShip([e,t]){let s;return this.board.forEach((i=>{i.forEach((i=>{if(i.box[0]===e&&i.box[1]===t){if("ship"in i==0)return i.ship=S(1,!1,0),s="placed ship",this.noOfShips++,i;if("ship"in i==1)return void(s="already placed ship here")}}))})),s},colorSquare(e){this.gridItems&&this.gridItems.forEach((t=>{t.dataset.key===e&&(t.style.backgroundColor="grey")}))},recieveAttack([e,s]){let i,r=[e,s],o=JSON.stringify(r);return this.board.forEach((r=>{r.forEach((r=>{r.box[0]===e&&r.box[1]===s&&"ship"in r==1?(r.ship.hitShip(),this.noOfSuccesfulHits++,this.successHits.push(o),this.pushHits(o),i=r.ship.noOfHits,console.log("hit ship")):r.box[0]===e&&r.box[1]===s&&"ship"in r==0&&(console.log("missed ship"),this.pushMisses(o),i=t)}))})),this.colorSquare(o),this.checkShipStatus(),i},checkShipStatus(){this.noOfShips>0&&this.noOfSuccesfulHits==this.noOfShips&&(console.log("All ships sunk"),this.allShipsSunk=!0)},renderMisses(e){this.missedHits.forEach((t=>{e.textContent.includes(t)||(e.textContent+=`${t}, `)}))},pushMisses(e){if(e in this.missedHits==0)this.missedHits.push(e);else if(e in this.missedHits==1)return},pushHits(e){if(e in this.successHits==0)this.successHits.push(e);else if(e in this.successHits==1)return},renderHits(e){this.successHits.forEach((t=>{e.textContent.includes(t)||(e.textContent+=`${t}, `)}))},missedHits:t,noOfShips:0,noOfSuccesfulHits:0,allShipsSunk:!1,successHits:[]}},b=e=>({name:e,winner:!1}),H=()=>{let e=!0,t=!0,s=!1,i=[],o=[],n=[],l=b("player 1"),a=b("player 2"),c=g(2),u=g(2);c.ai=!1,u.ai=!0;for(let e=0;e<c.board.length;e++)c.board[e].forEach((e=>{let t=JSON.stringify(e.box);n.push(t)}));return{player1:l,player2:a,player_1_board:c,player_2_board:u,player2_history:o,player1_turn:t,player2_turn:s,validMoves:n,p1_shipsReady:!1,p2_shipsReady:!1,checkMoves:(e,t)=>t.some((t=>t===e)),checkHistory:(e,t)=>t.some((t=>t===e)),async recieveInput(e){let t,s=!1;for(;!s;){let i=await f();if(0==this.checkHistory(i,e)&&1==this.checkMoves(i,n))return alert("valid"),e.push(i),s=!0,t=i,i;1!=this.checkHistory(i,e)&&0!=this.checkMoves(i,n)||alert("must make valid move")}return t},registerTurn(e,t){let s=[],i=parseInt(t[1]),r=parseInt(t[3]);s.push(i,r),e.recieveAttack(s),console.log(e.board)},async makeMoves(){for(;!0===e;){if(1==t){console.log("player 1 turn"),r.innerHTML="Player 1 Enter Coordinates to attack";let e=await this.recieveInput(o);this.registerTurn(u,e),u.renderMisses(y.p2_missed),u.renderHits(y.p2_success),console.log(e),t=!1,s=!0}else if(1==s){console.log("player 2 turn"),r.innerHTML="Player 2 Enter Coordinates to attack";let e=await this.recieveInput(i);this.registerTurn(c,e),c.renderMisses(y.p1_missed),c.renderHits(y.p1_success),console.log(e),s=!1,t=!0}this.endGame(c,u)}},endGame(t,s){1!=t.allShipsSunk&&1!=s.allShipsSunk||(e=!1),1==t.allShipsSunk&&alert("player 2 wins"),1==s.allShipsSunk&&alert("player 1 wins")}}};H()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,